/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package autoscalinggroup

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/autoscaling"

	svcapitypes "github.com/crossplane/provider-aws/apis/autoscaling/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeAutoScalingGroupsInput returns input for read
// operation.
func GenerateDescribeAutoScalingGroupsInput(cr *svcapitypes.AutoScalingGroup) *svcsdk.DescribeAutoScalingGroupsInput {
	res := &svcsdk.DescribeAutoScalingGroupsInput{}

	if cr.Spec.ForProvider.AutoScalingGroupName != nil {
		f0 := []*string{}
		f0 = append(f0, cr.Spec.ForProvider.AutoScalingGroupName)
		res.SetAutoScalingGroupNames(f0)
	}

	return res
}

// GenerateAutoScalingGroup returns the current state in the form of *svcapitypes.AutoScalingGroup.
func GenerateAutoScalingGroup(resp *svcsdk.DescribeAutoScalingGroupsOutput) *svcapitypes.AutoScalingGroup {
	cr := &svcapitypes.AutoScalingGroup{}

	found := false
	for _, elem := range resp.AutoScalingGroups {
		if elem.AutoScalingGroupName != nil {
			cr.Spec.ForProvider.AutoScalingGroupName = elem.AutoScalingGroupName
		} else {
			cr.Spec.ForProvider.AutoScalingGroupName = nil
		}
		if elem.AvailabilityZones != nil {
			f2 := []*string{}
			for _, f2iter := range elem.AvailabilityZones {
				var f2elem string
				f2elem = *f2iter
				f2 = append(f2, &f2elem)
			}
			cr.Spec.ForProvider.AvailabilityZones = f2
		} else {
			cr.Spec.ForProvider.AvailabilityZones = nil
		}
		if elem.CapacityRebalance != nil {
			cr.Spec.ForProvider.CapacityRebalance = elem.CapacityRebalance
		} else {
			cr.Spec.ForProvider.CapacityRebalance = nil
		}
		if elem.DefaultCooldown != nil {
			cr.Spec.ForProvider.DefaultCooldown = elem.DefaultCooldown
		} else {
			cr.Spec.ForProvider.DefaultCooldown = nil
		}
		if elem.DesiredCapacity != nil {
			cr.Spec.ForProvider.DesiredCapacity = elem.DesiredCapacity
		} else {
			cr.Spec.ForProvider.DesiredCapacity = nil
		}
		if elem.HealthCheckGracePeriod != nil {
			cr.Spec.ForProvider.HealthCheckGracePeriod = elem.HealthCheckGracePeriod
		} else {
			cr.Spec.ForProvider.HealthCheckGracePeriod = nil
		}
		if elem.HealthCheckType != nil {
			cr.Spec.ForProvider.HealthCheckType = elem.HealthCheckType
		} else {
			cr.Spec.ForProvider.HealthCheckType = nil
		}
		if elem.LaunchConfigurationName != nil {
			cr.Spec.ForProvider.LaunchConfigurationName = elem.LaunchConfigurationName
		} else {
			cr.Spec.ForProvider.LaunchConfigurationName = nil
		}
		if elem.LaunchTemplate != nil {
			f12 := &svcapitypes.LaunchTemplateSpecification{}
			if elem.LaunchTemplate.LaunchTemplateId != nil {
				f12.LaunchTemplateID = elem.LaunchTemplate.LaunchTemplateId
			}
			if elem.LaunchTemplate.LaunchTemplateName != nil {
				f12.LaunchTemplateName = elem.LaunchTemplate.LaunchTemplateName
			}
			if elem.LaunchTemplate.Version != nil {
				f12.Version = elem.LaunchTemplate.Version
			}
			cr.Spec.ForProvider.LaunchTemplate = f12
		} else {
			cr.Spec.ForProvider.LaunchTemplate = nil
		}
		if elem.LoadBalancerNames != nil {
			f13 := []*string{}
			for _, f13iter := range elem.LoadBalancerNames {
				var f13elem string
				f13elem = *f13iter
				f13 = append(f13, &f13elem)
			}
			cr.Spec.ForProvider.LoadBalancerNames = f13
		} else {
			cr.Spec.ForProvider.LoadBalancerNames = nil
		}
		if elem.MaxInstanceLifetime != nil {
			cr.Spec.ForProvider.MaxInstanceLifetime = elem.MaxInstanceLifetime
		} else {
			cr.Spec.ForProvider.MaxInstanceLifetime = nil
		}
		if elem.MaxSize != nil {
			cr.Spec.ForProvider.MaxSize = elem.MaxSize
		} else {
			cr.Spec.ForProvider.MaxSize = nil
		}
		if elem.MinSize != nil {
			cr.Spec.ForProvider.MinSize = elem.MinSize
		} else {
			cr.Spec.ForProvider.MinSize = nil
		}
		if elem.MixedInstancesPolicy != nil {
			f17 := &svcapitypes.MixedInstancesPolicy{}
			if elem.MixedInstancesPolicy.InstancesDistribution != nil {
				f17f0 := &svcapitypes.InstancesDistribution{}
				if elem.MixedInstancesPolicy.InstancesDistribution.OnDemandAllocationStrategy != nil {
					f17f0.OnDemandAllocationStrategy = elem.MixedInstancesPolicy.InstancesDistribution.OnDemandAllocationStrategy
				}
				if elem.MixedInstancesPolicy.InstancesDistribution.OnDemandBaseCapacity != nil {
					f17f0.OnDemandBaseCapacity = elem.MixedInstancesPolicy.InstancesDistribution.OnDemandBaseCapacity
				}
				if elem.MixedInstancesPolicy.InstancesDistribution.OnDemandPercentageAboveBaseCapacity != nil {
					f17f0.OnDemandPercentageAboveBaseCapacity = elem.MixedInstancesPolicy.InstancesDistribution.OnDemandPercentageAboveBaseCapacity
				}
				if elem.MixedInstancesPolicy.InstancesDistribution.SpotAllocationStrategy != nil {
					f17f0.SpotAllocationStrategy = elem.MixedInstancesPolicy.InstancesDistribution.SpotAllocationStrategy
				}
				if elem.MixedInstancesPolicy.InstancesDistribution.SpotInstancePools != nil {
					f17f0.SpotInstancePools = elem.MixedInstancesPolicy.InstancesDistribution.SpotInstancePools
				}
				if elem.MixedInstancesPolicy.InstancesDistribution.SpotMaxPrice != nil {
					f17f0.SpotMaxPrice = elem.MixedInstancesPolicy.InstancesDistribution.SpotMaxPrice
				}
				f17.InstancesDistribution = f17f0
			}
			if elem.MixedInstancesPolicy.LaunchTemplate != nil {
				f17f1 := &svcapitypes.LaunchTemplate{}
				if elem.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification != nil {
					f17f1f0 := &svcapitypes.LaunchTemplateSpecification{}
					if elem.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.LaunchTemplateId != nil {
						f17f1f0.LaunchTemplateID = elem.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.LaunchTemplateId
					}
					if elem.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.LaunchTemplateName != nil {
						f17f1f0.LaunchTemplateName = elem.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.LaunchTemplateName
					}
					if elem.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.Version != nil {
						f17f1f0.Version = elem.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.Version
					}
					f17f1.LaunchTemplateSpecification = f17f1f0
				}
				if elem.MixedInstancesPolicy.LaunchTemplate.Overrides != nil {
					f17f1f1 := []*svcapitypes.LaunchTemplateOverrides{}
					for _, f17f1f1iter := range elem.MixedInstancesPolicy.LaunchTemplate.Overrides {
						f17f1f1elem := &svcapitypes.LaunchTemplateOverrides{}
						if f17f1f1iter.InstanceType != nil {
							f17f1f1elem.InstanceType = f17f1f1iter.InstanceType
						}
						if f17f1f1iter.LaunchTemplateSpecification != nil {
							f17f1f1elemf1 := &svcapitypes.LaunchTemplateSpecification{}
							if f17f1f1iter.LaunchTemplateSpecification.LaunchTemplateId != nil {
								f17f1f1elemf1.LaunchTemplateID = f17f1f1iter.LaunchTemplateSpecification.LaunchTemplateId
							}
							if f17f1f1iter.LaunchTemplateSpecification.LaunchTemplateName != nil {
								f17f1f1elemf1.LaunchTemplateName = f17f1f1iter.LaunchTemplateSpecification.LaunchTemplateName
							}
							if f17f1f1iter.LaunchTemplateSpecification.Version != nil {
								f17f1f1elemf1.Version = f17f1f1iter.LaunchTemplateSpecification.Version
							}
							f17f1f1elem.LaunchTemplateSpecification = f17f1f1elemf1
						}
						if f17f1f1iter.WeightedCapacity != nil {
							f17f1f1elem.WeightedCapacity = f17f1f1iter.WeightedCapacity
						}
						f17f1f1 = append(f17f1f1, f17f1f1elem)
					}
					f17f1.Overrides = f17f1f1
				}
				f17.LaunchTemplate = f17f1
			}
			cr.Spec.ForProvider.MixedInstancesPolicy = f17
		} else {
			cr.Spec.ForProvider.MixedInstancesPolicy = nil
		}
		if elem.NewInstancesProtectedFromScaleIn != nil {
			cr.Spec.ForProvider.NewInstancesProtectedFromScaleIn = elem.NewInstancesProtectedFromScaleIn
		} else {
			cr.Spec.ForProvider.NewInstancesProtectedFromScaleIn = nil
		}
		if elem.PlacementGroup != nil {
			cr.Spec.ForProvider.PlacementGroup = elem.PlacementGroup
		} else {
			cr.Spec.ForProvider.PlacementGroup = nil
		}
		if elem.ServiceLinkedRoleARN != nil {
			cr.Spec.ForProvider.ServiceLinkedRoleARN = elem.ServiceLinkedRoleARN
		} else {
			cr.Spec.ForProvider.ServiceLinkedRoleARN = nil
		}
		if elem.Tags != nil {
			f23 := []*svcapitypes.Tag{}
			for _, f23iter := range elem.Tags {
				f23elem := &svcapitypes.Tag{}
				if f23iter.Key != nil {
					f23elem.Key = f23iter.Key
				}
				if f23iter.PropagateAtLaunch != nil {
					f23elem.PropagateAtLaunch = f23iter.PropagateAtLaunch
				}
				if f23iter.ResourceId != nil {
					f23elem.ResourceID = f23iter.ResourceId
				}
				if f23iter.ResourceType != nil {
					f23elem.ResourceType = f23iter.ResourceType
				}
				if f23iter.Value != nil {
					f23elem.Value = f23iter.Value
				}
				f23 = append(f23, f23elem)
			}
			cr.Spec.ForProvider.Tags = f23
		} else {
			cr.Spec.ForProvider.Tags = nil
		}
		if elem.TargetGroupARNs != nil {
			f24 := []*string{}
			for _, f24iter := range elem.TargetGroupARNs {
				var f24elem string
				f24elem = *f24iter
				f24 = append(f24, &f24elem)
			}
			cr.Spec.ForProvider.TargetGroupARNs = f24
		} else {
			cr.Spec.ForProvider.TargetGroupARNs = nil
		}
		if elem.TerminationPolicies != nil {
			f25 := []*string{}
			for _, f25iter := range elem.TerminationPolicies {
				var f25elem string
				f25elem = *f25iter
				f25 = append(f25, &f25elem)
			}
			cr.Spec.ForProvider.TerminationPolicies = f25
		} else {
			cr.Spec.ForProvider.TerminationPolicies = nil
		}
		if elem.VPCZoneIdentifier != nil {
			cr.Spec.ForProvider.VPCZoneIdentifier = elem.VPCZoneIdentifier
		} else {
			cr.Spec.ForProvider.VPCZoneIdentifier = nil
		}
		found = true
		break
	}
	if !found {
		return cr
	}

	return cr
}

// GenerateCreateAutoScalingGroupInput returns a create input.
func GenerateCreateAutoScalingGroupInput(cr *svcapitypes.AutoScalingGroup) *svcsdk.CreateAutoScalingGroupInput {
	res := &svcsdk.CreateAutoScalingGroupInput{}

	if cr.Spec.ForProvider.AutoScalingGroupName != nil {
		res.SetAutoScalingGroupName(*cr.Spec.ForProvider.AutoScalingGroupName)
	}
	if cr.Spec.ForProvider.AvailabilityZones != nil {
		f1 := []*string{}
		for _, f1iter := range cr.Spec.ForProvider.AvailabilityZones {
			var f1elem string
			f1elem = *f1iter
			f1 = append(f1, &f1elem)
		}
		res.SetAvailabilityZones(f1)
	}
	if cr.Spec.ForProvider.CapacityRebalance != nil {
		res.SetCapacityRebalance(*cr.Spec.ForProvider.CapacityRebalance)
	}
	if cr.Spec.ForProvider.DefaultCooldown != nil {
		res.SetDefaultCooldown(*cr.Spec.ForProvider.DefaultCooldown)
	}
	if cr.Spec.ForProvider.DesiredCapacity != nil {
		res.SetDesiredCapacity(*cr.Spec.ForProvider.DesiredCapacity)
	}
	if cr.Spec.ForProvider.HealthCheckGracePeriod != nil {
		res.SetHealthCheckGracePeriod(*cr.Spec.ForProvider.HealthCheckGracePeriod)
	}
	if cr.Spec.ForProvider.HealthCheckType != nil {
		res.SetHealthCheckType(*cr.Spec.ForProvider.HealthCheckType)
	}
	if cr.Spec.ForProvider.InstanceID != nil {
		res.SetInstanceId(*cr.Spec.ForProvider.InstanceID)
	}
	if cr.Spec.ForProvider.LaunchConfigurationName != nil {
		res.SetLaunchConfigurationName(*cr.Spec.ForProvider.LaunchConfigurationName)
	}
	if cr.Spec.ForProvider.LaunchTemplate != nil {
		f9 := &svcsdk.LaunchTemplateSpecification{}
		if cr.Spec.ForProvider.LaunchTemplate.LaunchTemplateID != nil {
			f9.SetLaunchTemplateId(*cr.Spec.ForProvider.LaunchTemplate.LaunchTemplateID)
		}
		if cr.Spec.ForProvider.LaunchTemplate.LaunchTemplateName != nil {
			f9.SetLaunchTemplateName(*cr.Spec.ForProvider.LaunchTemplate.LaunchTemplateName)
		}
		if cr.Spec.ForProvider.LaunchTemplate.Version != nil {
			f9.SetVersion(*cr.Spec.ForProvider.LaunchTemplate.Version)
		}
		res.SetLaunchTemplate(f9)
	}
	if cr.Spec.ForProvider.LifecycleHookSpecificationList != nil {
		f10 := []*svcsdk.LifecycleHookSpecification{}
		for _, f10iter := range cr.Spec.ForProvider.LifecycleHookSpecificationList {
			f10elem := &svcsdk.LifecycleHookSpecification{}
			if f10iter.DefaultResult != nil {
				f10elem.SetDefaultResult(*f10iter.DefaultResult)
			}
			if f10iter.HeartbeatTimeout != nil {
				f10elem.SetHeartbeatTimeout(*f10iter.HeartbeatTimeout)
			}
			if f10iter.LifecycleHookName != nil {
				f10elem.SetLifecycleHookName(*f10iter.LifecycleHookName)
			}
			if f10iter.LifecycleTransition != nil {
				f10elem.SetLifecycleTransition(*f10iter.LifecycleTransition)
			}
			if f10iter.NotificationMetadata != nil {
				f10elem.SetNotificationMetadata(*f10iter.NotificationMetadata)
			}
			if f10iter.NotificationTargetARN != nil {
				f10elem.SetNotificationTargetARN(*f10iter.NotificationTargetARN)
			}
			if f10iter.RoleARN != nil {
				f10elem.SetRoleARN(*f10iter.RoleARN)
			}
			f10 = append(f10, f10elem)
		}
		res.SetLifecycleHookSpecificationList(f10)
	}
	if cr.Spec.ForProvider.LoadBalancerNames != nil {
		f11 := []*string{}
		for _, f11iter := range cr.Spec.ForProvider.LoadBalancerNames {
			var f11elem string
			f11elem = *f11iter
			f11 = append(f11, &f11elem)
		}
		res.SetLoadBalancerNames(f11)
	}
	if cr.Spec.ForProvider.MaxInstanceLifetime != nil {
		res.SetMaxInstanceLifetime(*cr.Spec.ForProvider.MaxInstanceLifetime)
	}
	if cr.Spec.ForProvider.MaxSize != nil {
		res.SetMaxSize(*cr.Spec.ForProvider.MaxSize)
	}
	if cr.Spec.ForProvider.MinSize != nil {
		res.SetMinSize(*cr.Spec.ForProvider.MinSize)
	}
	if cr.Spec.ForProvider.MixedInstancesPolicy != nil {
		f15 := &svcsdk.MixedInstancesPolicy{}
		if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution != nil {
			f15f0 := &svcsdk.InstancesDistribution{}
			if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.OnDemandAllocationStrategy != nil {
				f15f0.SetOnDemandAllocationStrategy(*cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.OnDemandAllocationStrategy)
			}
			if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.OnDemandBaseCapacity != nil {
				f15f0.SetOnDemandBaseCapacity(*cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.OnDemandBaseCapacity)
			}
			if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.OnDemandPercentageAboveBaseCapacity != nil {
				f15f0.SetOnDemandPercentageAboveBaseCapacity(*cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.OnDemandPercentageAboveBaseCapacity)
			}
			if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.SpotAllocationStrategy != nil {
				f15f0.SetSpotAllocationStrategy(*cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.SpotAllocationStrategy)
			}
			if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.SpotInstancePools != nil {
				f15f0.SetSpotInstancePools(*cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.SpotInstancePools)
			}
			if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.SpotMaxPrice != nil {
				f15f0.SetSpotMaxPrice(*cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.SpotMaxPrice)
			}
			f15.SetInstancesDistribution(f15f0)
		}
		if cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate != nil {
			f15f1 := &svcsdk.LaunchTemplate{}
			if cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification != nil {
				f15f1f0 := &svcsdk.LaunchTemplateSpecification{}
				if cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.LaunchTemplateID != nil {
					f15f1f0.SetLaunchTemplateId(*cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.LaunchTemplateID)
				}
				if cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.LaunchTemplateName != nil {
					f15f1f0.SetLaunchTemplateName(*cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.LaunchTemplateName)
				}
				if cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.Version != nil {
					f15f1f0.SetVersion(*cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.Version)
				}
				f15f1.SetLaunchTemplateSpecification(f15f1f0)
			}
			if cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.Overrides != nil {
				f15f1f1 := []*svcsdk.LaunchTemplateOverrides{}
				for _, f15f1f1iter := range cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.Overrides {
					f15f1f1elem := &svcsdk.LaunchTemplateOverrides{}
					if f15f1f1iter.InstanceType != nil {
						f15f1f1elem.SetInstanceType(*f15f1f1iter.InstanceType)
					}
					if f15f1f1iter.LaunchTemplateSpecification != nil {
						f15f1f1elemf1 := &svcsdk.LaunchTemplateSpecification{}
						if f15f1f1iter.LaunchTemplateSpecification.LaunchTemplateID != nil {
							f15f1f1elemf1.SetLaunchTemplateId(*f15f1f1iter.LaunchTemplateSpecification.LaunchTemplateID)
						}
						if f15f1f1iter.LaunchTemplateSpecification.LaunchTemplateName != nil {
							f15f1f1elemf1.SetLaunchTemplateName(*f15f1f1iter.LaunchTemplateSpecification.LaunchTemplateName)
						}
						if f15f1f1iter.LaunchTemplateSpecification.Version != nil {
							f15f1f1elemf1.SetVersion(*f15f1f1iter.LaunchTemplateSpecification.Version)
						}
						f15f1f1elem.SetLaunchTemplateSpecification(f15f1f1elemf1)
					}
					if f15f1f1iter.WeightedCapacity != nil {
						f15f1f1elem.SetWeightedCapacity(*f15f1f1iter.WeightedCapacity)
					}
					f15f1f1 = append(f15f1f1, f15f1f1elem)
				}
				f15f1.SetOverrides(f15f1f1)
			}
			f15.SetLaunchTemplate(f15f1)
		}
		res.SetMixedInstancesPolicy(f15)
	}
	if cr.Spec.ForProvider.NewInstancesProtectedFromScaleIn != nil {
		res.SetNewInstancesProtectedFromScaleIn(*cr.Spec.ForProvider.NewInstancesProtectedFromScaleIn)
	}
	if cr.Spec.ForProvider.PlacementGroup != nil {
		res.SetPlacementGroup(*cr.Spec.ForProvider.PlacementGroup)
	}
	if cr.Spec.ForProvider.ServiceLinkedRoleARN != nil {
		res.SetServiceLinkedRoleARN(*cr.Spec.ForProvider.ServiceLinkedRoleARN)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f19 := []*svcsdk.Tag{}
		for _, f19iter := range cr.Spec.ForProvider.Tags {
			f19elem := &svcsdk.Tag{}
			if f19iter.Key != nil {
				f19elem.SetKey(*f19iter.Key)
			}
			if f19iter.PropagateAtLaunch != nil {
				f19elem.SetPropagateAtLaunch(*f19iter.PropagateAtLaunch)
			}
			if f19iter.ResourceID != nil {
				f19elem.SetResourceId(*f19iter.ResourceID)
			}
			if f19iter.ResourceType != nil {
				f19elem.SetResourceType(*f19iter.ResourceType)
			}
			if f19iter.Value != nil {
				f19elem.SetValue(*f19iter.Value)
			}
			f19 = append(f19, f19elem)
		}
		res.SetTags(f19)
	}
	if cr.Spec.ForProvider.TargetGroupARNs != nil {
		f20 := []*string{}
		for _, f20iter := range cr.Spec.ForProvider.TargetGroupARNs {
			var f20elem string
			f20elem = *f20iter
			f20 = append(f20, &f20elem)
		}
		res.SetTargetGroupARNs(f20)
	}
	if cr.Spec.ForProvider.TerminationPolicies != nil {
		f21 := []*string{}
		for _, f21iter := range cr.Spec.ForProvider.TerminationPolicies {
			var f21elem string
			f21elem = *f21iter
			f21 = append(f21, &f21elem)
		}
		res.SetTerminationPolicies(f21)
	}
	if cr.Spec.ForProvider.VPCZoneIdentifier != nil {
		res.SetVPCZoneIdentifier(*cr.Spec.ForProvider.VPCZoneIdentifier)
	}

	return res
}

// GenerateUpdateAutoScalingGroupInput returns an update input.
func GenerateUpdateAutoScalingGroupInput(cr *svcapitypes.AutoScalingGroup) *svcsdk.UpdateAutoScalingGroupInput {
	res := &svcsdk.UpdateAutoScalingGroupInput{}

	if cr.Spec.ForProvider.AutoScalingGroupName != nil {
		res.SetAutoScalingGroupName(*cr.Spec.ForProvider.AutoScalingGroupName)
	}
	if cr.Spec.ForProvider.AvailabilityZones != nil {
		f1 := []*string{}
		for _, f1iter := range cr.Spec.ForProvider.AvailabilityZones {
			var f1elem string
			f1elem = *f1iter
			f1 = append(f1, &f1elem)
		}
		res.SetAvailabilityZones(f1)
	}
	if cr.Spec.ForProvider.CapacityRebalance != nil {
		res.SetCapacityRebalance(*cr.Spec.ForProvider.CapacityRebalance)
	}
	if cr.Spec.ForProvider.DefaultCooldown != nil {
		res.SetDefaultCooldown(*cr.Spec.ForProvider.DefaultCooldown)
	}
	if cr.Spec.ForProvider.DesiredCapacity != nil {
		res.SetDesiredCapacity(*cr.Spec.ForProvider.DesiredCapacity)
	}
	if cr.Spec.ForProvider.HealthCheckGracePeriod != nil {
		res.SetHealthCheckGracePeriod(*cr.Spec.ForProvider.HealthCheckGracePeriod)
	}
	if cr.Spec.ForProvider.HealthCheckType != nil {
		res.SetHealthCheckType(*cr.Spec.ForProvider.HealthCheckType)
	}
	if cr.Spec.ForProvider.LaunchConfigurationName != nil {
		res.SetLaunchConfigurationName(*cr.Spec.ForProvider.LaunchConfigurationName)
	}
	if cr.Spec.ForProvider.LaunchTemplate != nil {
		f8 := &svcsdk.LaunchTemplateSpecification{}
		if cr.Spec.ForProvider.LaunchTemplate.LaunchTemplateID != nil {
			f8.SetLaunchTemplateId(*cr.Spec.ForProvider.LaunchTemplate.LaunchTemplateID)
		}
		if cr.Spec.ForProvider.LaunchTemplate.LaunchTemplateName != nil {
			f8.SetLaunchTemplateName(*cr.Spec.ForProvider.LaunchTemplate.LaunchTemplateName)
		}
		if cr.Spec.ForProvider.LaunchTemplate.Version != nil {
			f8.SetVersion(*cr.Spec.ForProvider.LaunchTemplate.Version)
		}
		res.SetLaunchTemplate(f8)
	}
	if cr.Spec.ForProvider.MaxInstanceLifetime != nil {
		res.SetMaxInstanceLifetime(*cr.Spec.ForProvider.MaxInstanceLifetime)
	}
	if cr.Spec.ForProvider.MaxSize != nil {
		res.SetMaxSize(*cr.Spec.ForProvider.MaxSize)
	}
	if cr.Spec.ForProvider.MinSize != nil {
		res.SetMinSize(*cr.Spec.ForProvider.MinSize)
	}
	if cr.Spec.ForProvider.MixedInstancesPolicy != nil {
		f12 := &svcsdk.MixedInstancesPolicy{}
		if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution != nil {
			f12f0 := &svcsdk.InstancesDistribution{}
			if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.OnDemandAllocationStrategy != nil {
				f12f0.SetOnDemandAllocationStrategy(*cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.OnDemandAllocationStrategy)
			}
			if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.OnDemandBaseCapacity != nil {
				f12f0.SetOnDemandBaseCapacity(*cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.OnDemandBaseCapacity)
			}
			if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.OnDemandPercentageAboveBaseCapacity != nil {
				f12f0.SetOnDemandPercentageAboveBaseCapacity(*cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.OnDemandPercentageAboveBaseCapacity)
			}
			if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.SpotAllocationStrategy != nil {
				f12f0.SetSpotAllocationStrategy(*cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.SpotAllocationStrategy)
			}
			if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.SpotInstancePools != nil {
				f12f0.SetSpotInstancePools(*cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.SpotInstancePools)
			}
			if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.SpotMaxPrice != nil {
				f12f0.SetSpotMaxPrice(*cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.SpotMaxPrice)
			}
			f12.SetInstancesDistribution(f12f0)
		}
		if cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate != nil {
			f12f1 := &svcsdk.LaunchTemplate{}
			if cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification != nil {
				f12f1f0 := &svcsdk.LaunchTemplateSpecification{}
				if cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.LaunchTemplateID != nil {
					f12f1f0.SetLaunchTemplateId(*cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.LaunchTemplateID)
				}
				if cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.LaunchTemplateName != nil {
					f12f1f0.SetLaunchTemplateName(*cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.LaunchTemplateName)
				}
				if cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.Version != nil {
					f12f1f0.SetVersion(*cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.Version)
				}
				f12f1.SetLaunchTemplateSpecification(f12f1f0)
			}
			if cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.Overrides != nil {
				f12f1f1 := []*svcsdk.LaunchTemplateOverrides{}
				for _, f12f1f1iter := range cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.Overrides {
					f12f1f1elem := &svcsdk.LaunchTemplateOverrides{}
					if f12f1f1iter.InstanceType != nil {
						f12f1f1elem.SetInstanceType(*f12f1f1iter.InstanceType)
					}
					if f12f1f1iter.LaunchTemplateSpecification != nil {
						f12f1f1elemf1 := &svcsdk.LaunchTemplateSpecification{}
						if f12f1f1iter.LaunchTemplateSpecification.LaunchTemplateID != nil {
							f12f1f1elemf1.SetLaunchTemplateId(*f12f1f1iter.LaunchTemplateSpecification.LaunchTemplateID)
						}
						if f12f1f1iter.LaunchTemplateSpecification.LaunchTemplateName != nil {
							f12f1f1elemf1.SetLaunchTemplateName(*f12f1f1iter.LaunchTemplateSpecification.LaunchTemplateName)
						}
						if f12f1f1iter.LaunchTemplateSpecification.Version != nil {
							f12f1f1elemf1.SetVersion(*f12f1f1iter.LaunchTemplateSpecification.Version)
						}
						f12f1f1elem.SetLaunchTemplateSpecification(f12f1f1elemf1)
					}
					if f12f1f1iter.WeightedCapacity != nil {
						f12f1f1elem.SetWeightedCapacity(*f12f1f1iter.WeightedCapacity)
					}
					f12f1f1 = append(f12f1f1, f12f1f1elem)
				}
				f12f1.SetOverrides(f12f1f1)
			}
			f12.SetLaunchTemplate(f12f1)
		}
		res.SetMixedInstancesPolicy(f12)
	}
	if cr.Spec.ForProvider.NewInstancesProtectedFromScaleIn != nil {
		res.SetNewInstancesProtectedFromScaleIn(*cr.Spec.ForProvider.NewInstancesProtectedFromScaleIn)
	}
	if cr.Spec.ForProvider.PlacementGroup != nil {
		res.SetPlacementGroup(*cr.Spec.ForProvider.PlacementGroup)
	}
	if cr.Spec.ForProvider.ServiceLinkedRoleARN != nil {
		res.SetServiceLinkedRoleARN(*cr.Spec.ForProvider.ServiceLinkedRoleARN)
	}
	if cr.Spec.ForProvider.TerminationPolicies != nil {
		f16 := []*string{}
		for _, f16iter := range cr.Spec.ForProvider.TerminationPolicies {
			var f16elem string
			f16elem = *f16iter
			f16 = append(f16, &f16elem)
		}
		res.SetTerminationPolicies(f16)
	}
	if cr.Spec.ForProvider.VPCZoneIdentifier != nil {
		res.SetVPCZoneIdentifier(*cr.Spec.ForProvider.VPCZoneIdentifier)
	}

	return res
}

// GenerateDeleteAutoScalingGroupInput returns a deletion input.
func GenerateDeleteAutoScalingGroupInput(cr *svcapitypes.AutoScalingGroup) *svcsdk.DeleteAutoScalingGroupInput {
	res := &svcsdk.DeleteAutoScalingGroupInput{}

	if cr.Spec.ForProvider.AutoScalingGroupName != nil {
		res.SetAutoScalingGroupName(*cr.Spec.ForProvider.AutoScalingGroupName)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "UNKNOWN"
}
