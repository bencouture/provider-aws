/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package launchconfiguration

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/autoscaling"

	svcapitypes "github.com/crossplane/provider-aws/apis/autoscaling/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeLaunchConfigurationsInput returns input for read
// operation.
func GenerateDescribeLaunchConfigurationsInput(cr *svcapitypes.LaunchConfiguration) *svcsdk.DescribeLaunchConfigurationsInput {
	res := &svcsdk.DescribeLaunchConfigurationsInput{}

	if cr.Spec.ForProvider.LaunchConfigurationName != nil {
		f0 := []*string{}
		f0 = append(f0, cr.Spec.ForProvider.LaunchConfigurationName)
		res.SetLaunchConfigurationNames(f0)
	}

	return res
}

// GenerateLaunchConfiguration returns the current state in the form of *svcapitypes.LaunchConfiguration.
func GenerateLaunchConfiguration(resp *svcsdk.DescribeLaunchConfigurationsOutput) *svcapitypes.LaunchConfiguration {
	cr := &svcapitypes.LaunchConfiguration{}

	found := false
	for _, elem := range resp.LaunchConfigurations {
		if elem.AssociatePublicIpAddress != nil {
			cr.Spec.ForProvider.AssociatePublicIPAddress = elem.AssociatePublicIpAddress
		} else {
			cr.Spec.ForProvider.AssociatePublicIPAddress = nil
		}
		if elem.BlockDeviceMappings != nil {
			f1 := []*svcapitypes.BlockDeviceMapping{}
			for _, f1iter := range elem.BlockDeviceMappings {
				f1elem := &svcapitypes.BlockDeviceMapping{}
				if f1iter.DeviceName != nil {
					f1elem.DeviceName = f1iter.DeviceName
				}
				if f1iter.Ebs != nil {
					f1elemf1 := &svcapitypes.EBS{}
					if f1iter.Ebs.DeleteOnTermination != nil {
						f1elemf1.DeleteOnTermination = f1iter.Ebs.DeleteOnTermination
					}
					if f1iter.Ebs.Encrypted != nil {
						f1elemf1.Encrypted = f1iter.Ebs.Encrypted
					}
					if f1iter.Ebs.Iops != nil {
						f1elemf1.IOPS = f1iter.Ebs.Iops
					}
					if f1iter.Ebs.SnapshotId != nil {
						f1elemf1.SnapshotID = f1iter.Ebs.SnapshotId
					}
					if f1iter.Ebs.VolumeSize != nil {
						f1elemf1.VolumeSize = f1iter.Ebs.VolumeSize
					}
					if f1iter.Ebs.VolumeType != nil {
						f1elemf1.VolumeType = f1iter.Ebs.VolumeType
					}
					f1elem.EBS = f1elemf1
				}
				if f1iter.NoDevice != nil {
					f1elem.NoDevice = f1iter.NoDevice
				}
				if f1iter.VirtualName != nil {
					f1elem.VirtualName = f1iter.VirtualName
				}
				f1 = append(f1, f1elem)
			}
			cr.Spec.ForProvider.BlockDeviceMappings = f1
		} else {
			cr.Spec.ForProvider.BlockDeviceMappings = nil
		}
		if elem.ClassicLinkVPCId != nil {
			cr.Spec.ForProvider.ClassicLinkVPCID = elem.ClassicLinkVPCId
		} else {
			cr.Spec.ForProvider.ClassicLinkVPCID = nil
		}
		if elem.ClassicLinkVPCSecurityGroups != nil {
			f3 := []*string{}
			for _, f3iter := range elem.ClassicLinkVPCSecurityGroups {
				var f3elem string
				f3elem = *f3iter
				f3 = append(f3, &f3elem)
			}
			cr.Spec.ForProvider.ClassicLinkVPCSecurityGroups = f3
		} else {
			cr.Spec.ForProvider.ClassicLinkVPCSecurityGroups = nil
		}
		if elem.EbsOptimized != nil {
			cr.Spec.ForProvider.EBSOptimized = elem.EbsOptimized
		} else {
			cr.Spec.ForProvider.EBSOptimized = nil
		}
		if elem.IamInstanceProfile != nil {
			cr.Spec.ForProvider.IAMInstanceProfile = elem.IamInstanceProfile
		} else {
			cr.Spec.ForProvider.IAMInstanceProfile = nil
		}
		if elem.ImageId != nil {
			cr.Spec.ForProvider.ImageID = elem.ImageId
		} else {
			cr.Spec.ForProvider.ImageID = nil
		}
		if elem.InstanceMonitoring != nil {
			f8 := &svcapitypes.InstanceMonitoring{}
			if elem.InstanceMonitoring.Enabled != nil {
				f8.Enabled = elem.InstanceMonitoring.Enabled
			}
			cr.Spec.ForProvider.InstanceMonitoring = f8
		} else {
			cr.Spec.ForProvider.InstanceMonitoring = nil
		}
		if elem.InstanceType != nil {
			cr.Spec.ForProvider.InstanceType = elem.InstanceType
		} else {
			cr.Spec.ForProvider.InstanceType = nil
		}
		if elem.KernelId != nil {
			cr.Spec.ForProvider.KernelID = elem.KernelId
		} else {
			cr.Spec.ForProvider.KernelID = nil
		}
		if elem.KeyName != nil {
			cr.Spec.ForProvider.KeyName = elem.KeyName
		} else {
			cr.Spec.ForProvider.KeyName = nil
		}
		if elem.LaunchConfigurationName != nil {
			cr.Spec.ForProvider.LaunchConfigurationName = elem.LaunchConfigurationName
		} else {
			cr.Spec.ForProvider.LaunchConfigurationName = nil
		}
		if elem.MetadataOptions != nil {
			f14 := &svcapitypes.InstanceMetadataOptions{}
			if elem.MetadataOptions.HttpEndpoint != nil {
				f14.HTTPEndpoint = elem.MetadataOptions.HttpEndpoint
			}
			if elem.MetadataOptions.HttpPutResponseHopLimit != nil {
				f14.HTTPPutResponseHopLimit = elem.MetadataOptions.HttpPutResponseHopLimit
			}
			if elem.MetadataOptions.HttpTokens != nil {
				f14.HTTPTokens = elem.MetadataOptions.HttpTokens
			}
			cr.Spec.ForProvider.MetadataOptions = f14
		} else {
			cr.Spec.ForProvider.MetadataOptions = nil
		}
		if elem.PlacementTenancy != nil {
			cr.Spec.ForProvider.PlacementTenancy = elem.PlacementTenancy
		} else {
			cr.Spec.ForProvider.PlacementTenancy = nil
		}
		if elem.RamdiskId != nil {
			cr.Spec.ForProvider.RamdiskID = elem.RamdiskId
		} else {
			cr.Spec.ForProvider.RamdiskID = nil
		}
		if elem.SecurityGroups != nil {
			f17 := []*string{}
			for _, f17iter := range elem.SecurityGroups {
				var f17elem string
				f17elem = *f17iter
				f17 = append(f17, &f17elem)
			}
			cr.Spec.ForProvider.SecurityGroups = f17
		} else {
			cr.Spec.ForProvider.SecurityGroups = nil
		}
		if elem.SpotPrice != nil {
			cr.Spec.ForProvider.SpotPrice = elem.SpotPrice
		} else {
			cr.Spec.ForProvider.SpotPrice = nil
		}
		if elem.UserData != nil {
			cr.Spec.ForProvider.UserData = elem.UserData
		} else {
			cr.Spec.ForProvider.UserData = nil
		}
		found = true
		break
	}
	if !found {
		return cr
	}

	return cr
}

// GenerateCreateLaunchConfigurationInput returns a create input.
func GenerateCreateLaunchConfigurationInput(cr *svcapitypes.LaunchConfiguration) *svcsdk.CreateLaunchConfigurationInput {
	res := &svcsdk.CreateLaunchConfigurationInput{}

	if cr.Spec.ForProvider.AssociatePublicIPAddress != nil {
		res.SetAssociatePublicIpAddress(*cr.Spec.ForProvider.AssociatePublicIPAddress)
	}
	if cr.Spec.ForProvider.BlockDeviceMappings != nil {
		f1 := []*svcsdk.BlockDeviceMapping{}
		for _, f1iter := range cr.Spec.ForProvider.BlockDeviceMappings {
			f1elem := &svcsdk.BlockDeviceMapping{}
			if f1iter.DeviceName != nil {
				f1elem.SetDeviceName(*f1iter.DeviceName)
			}
			if f1iter.EBS != nil {
				f1elemf1 := &svcsdk.Ebs{}
				if f1iter.EBS.DeleteOnTermination != nil {
					f1elemf1.SetDeleteOnTermination(*f1iter.EBS.DeleteOnTermination)
				}
				if f1iter.EBS.Encrypted != nil {
					f1elemf1.SetEncrypted(*f1iter.EBS.Encrypted)
				}
				if f1iter.EBS.IOPS != nil {
					f1elemf1.SetIops(*f1iter.EBS.IOPS)
				}
				if f1iter.EBS.SnapshotID != nil {
					f1elemf1.SetSnapshotId(*f1iter.EBS.SnapshotID)
				}
				if f1iter.EBS.VolumeSize != nil {
					f1elemf1.SetVolumeSize(*f1iter.EBS.VolumeSize)
				}
				if f1iter.EBS.VolumeType != nil {
					f1elemf1.SetVolumeType(*f1iter.EBS.VolumeType)
				}
				f1elem.SetEbs(f1elemf1)
			}
			if f1iter.NoDevice != nil {
				f1elem.SetNoDevice(*f1iter.NoDevice)
			}
			if f1iter.VirtualName != nil {
				f1elem.SetVirtualName(*f1iter.VirtualName)
			}
			f1 = append(f1, f1elem)
		}
		res.SetBlockDeviceMappings(f1)
	}
	if cr.Spec.ForProvider.ClassicLinkVPCID != nil {
		res.SetClassicLinkVPCId(*cr.Spec.ForProvider.ClassicLinkVPCID)
	}
	if cr.Spec.ForProvider.ClassicLinkVPCSecurityGroups != nil {
		f3 := []*string{}
		for _, f3iter := range cr.Spec.ForProvider.ClassicLinkVPCSecurityGroups {
			var f3elem string
			f3elem = *f3iter
			f3 = append(f3, &f3elem)
		}
		res.SetClassicLinkVPCSecurityGroups(f3)
	}
	if cr.Spec.ForProvider.EBSOptimized != nil {
		res.SetEbsOptimized(*cr.Spec.ForProvider.EBSOptimized)
	}
	if cr.Spec.ForProvider.IAMInstanceProfile != nil {
		res.SetIamInstanceProfile(*cr.Spec.ForProvider.IAMInstanceProfile)
	}
	if cr.Spec.ForProvider.ImageID != nil {
		res.SetImageId(*cr.Spec.ForProvider.ImageID)
	}
	if cr.Spec.ForProvider.InstanceID != nil {
		res.SetInstanceId(*cr.Spec.ForProvider.InstanceID)
	}
	if cr.Spec.ForProvider.InstanceMonitoring != nil {
		f8 := &svcsdk.InstanceMonitoring{}
		if cr.Spec.ForProvider.InstanceMonitoring.Enabled != nil {
			f8.SetEnabled(*cr.Spec.ForProvider.InstanceMonitoring.Enabled)
		}
		res.SetInstanceMonitoring(f8)
	}
	if cr.Spec.ForProvider.InstanceType != nil {
		res.SetInstanceType(*cr.Spec.ForProvider.InstanceType)
	}
	if cr.Spec.ForProvider.KernelID != nil {
		res.SetKernelId(*cr.Spec.ForProvider.KernelID)
	}
	if cr.Spec.ForProvider.KeyName != nil {
		res.SetKeyName(*cr.Spec.ForProvider.KeyName)
	}
	if cr.Spec.ForProvider.LaunchConfigurationName != nil {
		res.SetLaunchConfigurationName(*cr.Spec.ForProvider.LaunchConfigurationName)
	}
	if cr.Spec.ForProvider.MetadataOptions != nil {
		f13 := &svcsdk.InstanceMetadataOptions{}
		if cr.Spec.ForProvider.MetadataOptions.HTTPEndpoint != nil {
			f13.SetHttpEndpoint(*cr.Spec.ForProvider.MetadataOptions.HTTPEndpoint)
		}
		if cr.Spec.ForProvider.MetadataOptions.HTTPPutResponseHopLimit != nil {
			f13.SetHttpPutResponseHopLimit(*cr.Spec.ForProvider.MetadataOptions.HTTPPutResponseHopLimit)
		}
		if cr.Spec.ForProvider.MetadataOptions.HTTPTokens != nil {
			f13.SetHttpTokens(*cr.Spec.ForProvider.MetadataOptions.HTTPTokens)
		}
		res.SetMetadataOptions(f13)
	}
	if cr.Spec.ForProvider.PlacementTenancy != nil {
		res.SetPlacementTenancy(*cr.Spec.ForProvider.PlacementTenancy)
	}
	if cr.Spec.ForProvider.RamdiskID != nil {
		res.SetRamdiskId(*cr.Spec.ForProvider.RamdiskID)
	}
	if cr.Spec.ForProvider.SecurityGroups != nil {
		f16 := []*string{}
		for _, f16iter := range cr.Spec.ForProvider.SecurityGroups {
			var f16elem string
			f16elem = *f16iter
			f16 = append(f16, &f16elem)
		}
		res.SetSecurityGroups(f16)
	}
	if cr.Spec.ForProvider.SpotPrice != nil {
		res.SetSpotPrice(*cr.Spec.ForProvider.SpotPrice)
	}
	if cr.Spec.ForProvider.UserData != nil {
		res.SetUserData(*cr.Spec.ForProvider.UserData)
	}

	return res
}

// GenerateDeleteLaunchConfigurationInput returns a deletion input.
func GenerateDeleteLaunchConfigurationInput(cr *svcapitypes.LaunchConfiguration) *svcsdk.DeleteLaunchConfigurationInput {
	res := &svcsdk.DeleteLaunchConfigurationInput{}

	if cr.Spec.ForProvider.LaunchConfigurationName != nil {
		res.SetLaunchConfigurationName(*cr.Spec.ForProvider.LaunchConfigurationName)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "UNKNOWN"
}
